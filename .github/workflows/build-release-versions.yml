on: [release,workflow_dispatch]
jobs:
  build-and-upload:
    name: Build and Upload
    runs-on: ubuntu-latest

    strategy:
      matrix:
        downloadSource: [ GITHUB, SPIGOT, HANGAR, MODRINTH, CURSE_FORGE ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4.2.2
        with:
          distribution: 'adopt'
          java-version: '17'
          java-package: jdk
          architecture: x64
      - name: Set downloadSource in plugin.yml
        run: |
          sed -i "s/downloadSource:.*/downloadSource: '${{ matrix.downloadSource }}'/" src/main/resources/plugin.yml
          cat src/main/resources/plugin.yml
      - name: Build with Maven
        run: |
          mvn install
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          echo "git_hash=$git_hash" >> $GITHUB_ENV
          echo "artifactPath=$(pwd)/target" >> $GITHUB_ENV
      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project
      - name: Upload Plugin jar to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Plugin-${{ env.snapshotVersion }}-${{ matrix.downloadSource }}.jar
          path: ${{ env.artifactPath }}/TDRPlaytime-${{ steps.project.outputs.version }}.jar
      - name: Get release by tag
        id: get_release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: release } = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });
            console.log(JSON.stringify(release, null, 2));
            return release
      - name: Upload Plugin jar to release
        uses: actions/upload-release-asset@v1
        with:
            upload_url: ${{ steps.get_release.outputs.upload_url }}
            asset_path: ${{ env.artifactPath }}/TDRPlaytime-${{ steps.project.outputs.version }}.jar
            asset_name: TDRPlaytime-${{ steps.project.outputs.version }}.jar
            asset_content_type: application/java-archive
            asset_label: TDRPlaytime-${{ steps.project.outputs.version }}.jar