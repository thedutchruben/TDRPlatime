on:
  - push
  - pull_request
  - workflow_dispatch
name: Build DEV jars
jobs:
  build_dev_jar:
    name: Build DEV jars
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup JDK
      uses: actions/setup-java@v4.4.0
      with:
        distribution: 'adopt'
        java-version: '17'
        java-package: jdk
        architecture: x64
    - name: Build with Maven
      run: |
        mvn install
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        echo "git_hash=$git_hash" >> $GITHUB_ENV
        echo "artifactPath=$(pwd)/target" >> $GITHUB_ENV
    - name: Extract Maven project version
      run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      id: project
    - name: Upload Plugin jar
      uses: actions/upload-artifact@v4
      with:
        name: Plugin-${{ env.snapshotVersion }}-${{ env.git_hash }}.jar
        path: ${{ env.artifactPath }}/TDRPlaytime-${{ steps.project.outputs.version }}.jar
    - name: Sleep for 5 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '5s'
    - name: Generate Commit Message List
      id: commit_messages
      run: |
        last_tag=$(git describe --tags --abbrev=0)
        echo "Last release tag: $last_tag"
        commit_messages=$(git log $last_tag..HEAD --pretty=format:"- %s (%h)")
        echo "commit_messages=$commit_messages" >> $GITHUB_ENV
    - name: Create Pre-release and Upload Asset
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = `${process.env.artifactPath}/TDRPlaytime-${{ steps.project.outputs.version }}.jar`;

          // Generate the release body with commit messages
          const body = `### Changes since last release:\n${process.env.commit_messages}`;

          // Create the release
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `pre-release-${process.env.git_hash}`,
            target_commitish: context.sha,
            name: `Pre-release ${process.env.git_hash}`,
            body: body,
            draft: false,
            prerelease: true
          });

          console.log(`Created release: ${release.id}`);

          // Upload the JAR file as an asset
          const { data: asset } = await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release.id,
            name: `TDRPlaytime-${process.env.git_hash}.jar`,
            data: fs.readFileSync(path),
            headers: {
              'content-type': 'application/java-archive',
              'content-length': fs.statSync(path).size
            }
          });

          console.log(`Uploaded asset: ${asset.name}`);
