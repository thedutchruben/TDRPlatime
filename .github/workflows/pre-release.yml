name: Create/Update Pre-release

on:
  push:
    branches:
      - main

jobs:
  pre_release:
    name: Create/Update Pre-release
    concurrency:
      group: ${{ github.repository }}-pre-release
      cancel-in-progress: true
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}-test-server
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          java-package: jdk
          architecture: x64
      - name: Build with Maven
        run: |
          mvn install
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          echo "git_hash=$git_hash" >> $GITHUB_ENV
          echo "artifactPath=$(pwd)/target" >> $GITHUB_ENV
      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project
      - name: Upload Plugin jar
        uses: actions/upload-artifact@v4
        with:
          name: Plugin-${{ env.snapshotVersion }}-${{ env.git_hash }}.jar
          path: ${{ env.artifactPath }}/TDRPlaytime-${{ steps.project.outputs.version }}.jar
      - name: Sleep for 5 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '5s'
      - name: Generate Commit Message List
        id: commit_messages
        run: |
          last_tag=$(git describe --tags --abbrev=0)
          echo "Last release tag: $last_tag"
          commit_messages=$(git log $last_tag..HEAD --pretty=format:"- %s (%h)" | tr '\n' '|' )
          echo "commit_messages=$commit_messages" >> $GITHUB_ENV
      - name: Create Pre-release and Upload Asset
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = `${process.env.artifactPath}/TDRPlaytime-${{ steps.project.outputs.version }}.jar`;
            
            // Decode commit messages
            const commitMessages = process.env.commit_messages.replace(/\|/g, '\n');
            const body = `### Changes since last release:\n${commitMessages}`;
            
            // Create the release
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `pre-release-${process.env.git_hash}`,
              target_commitish: context.sha,
              name: `Pre-release ${process.env.git_hash}`,
              body: body,
              draft: false,
              prerelease: true
            });
            
            console.log(`Created release: ${release.id}`);
            
            // Upload the JAR file as an asset
            const { data: asset } = await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: `TDRPlaytime-${process.env.git_hash}.jar`,
              data: fs.readFileSync(path),
              headers: {
                'content-type': 'application/java-archive',
                'content-length': fs.statSync(path).size
              }
            });
            
            console.log(`Uploaded asset: ${asset.name}`);
      - name: Sleep for 5 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '5s'
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@8e1d5461f02b7886d3c1a774bfbd873650445aa2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d
        with:
          context: .github/test-server
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - run: curl -X GET https://n8n.thedutchservers.com/webhook/56343323-a23b-4748-b10c-44eda54b9fd1